// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDersler.Data.Concrete.EfCore.Contexts;

#nullable disable

namespace OzelDersler.Data.Migrations
{
    [DbContext(typeof(OzelDerslerContext))]
    partial class OzelDerslerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "student",
                            RoleId = "73c7b11c-0c5a-4a13-8bbc-7f760c699e64"
                        },
                        new
                        {
                            UserId = "ogrenci",
                            RoleId = "73c7b11c-0c5a-4a13-8bbc-7f760c699e64"
                        },
                        new
                        {
                            UserId = "teacher",
                            RoleId = "e812a7c2-6b7e-4e34-8652-25d827e9f72e"
                        },
                        new
                        {
                            UserId = "teacher1",
                            RoleId = "e812a7c2-6b7e-4e34-8652-25d827e9f72e"
                        },
                        new
                        {
                            UserId = "teacher2",
                            RoleId = "e812a7c2-6b7e-4e34-8652-25d827e9f72e"
                        },
                        new
                        {
                            UserId = "teacher3",
                            RoleId = "e812a7c2-6b7e-4e34-8652-25d827e9f72e"
                        },
                        new
                        {
                            UserId = "teacher4",
                            RoleId = "e812a7c2-6b7e-4e34-8652-25d827e9f72e"
                        },
                        new
                        {
                            UserId = "admin",
                            RoleId = "384f4624-8516-4896-8def-f962724c174e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "mat.png",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Kimya",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "kimya.png",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "İngilizce",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "ing.png",
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Müzik",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "muzik.png",
                            Url = "muzik"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Türkçe",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "turkce.png",
                            Url = "turkce"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Bilgisayar",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "bilgisayar.png",
                            Url = "bilgisayar"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Description = "Matematik kursu almak istiyorum.",
                            Name = "Matematik Özel Kursu",
                            PricePerHour = 500m,
                            Url = "matematik-ozel-kursu"
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 2,
                            Description = "Kimya kursu almak istiyorum.",
                            Name = "Kimya Özel Kursu",
                            PricePerHour = 400m,
                            Url = "kimya-ozel-kursu"
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 5,
                            Description = "Türkçe kursu veriyorum.",
                            Name = "Türkçe Özel Kursu",
                            PricePerHour = 400m,
                            Url = "turkce-ozel-kursu"
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 6,
                            Description = "Bilgisayar kursu veriyorum.",
                            Name = "Bilgisayar Özel Kursu",
                            PricePerHour = 500m,
                            Url = "bilgisayar-ozel-kursu"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e812a7c2-6b7e-4e34-8652-25d827e9f72e",
                            Description = "Teacher Rolü",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "73c7b11c-0c5a-4a13-8bbc-7f760c699e64",
                            Description = "Student Rolü",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "384f4624-8516-4896-8def-f962724c174e",
                            Description = "Admin Rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "student",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f73aa00-ae80-41af-b470-cda83f4cb1d5",
                            Email = "harun@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "STUDENT",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a3227b3-dd3f-41dd-b55e-3be66f3bedbe",
                            TwoFactorEnabled = false,
                            UserName = "student"
                        },
                        new
                        {
                            Id = "ogrenci",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f6b80d6-80e5-47d9-8d45-972c4ee81bed",
                            Email = "ogrenci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "OGRENCI",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad44d63f-63fc-4230-b269-e4ed9f4d492e",
                            TwoFactorEnabled = false,
                            UserName = "ogrenci"
                        },
                        new
                        {
                            Id = "teacher",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc351816-2d31-4693-b88d-5dd6373e5c18",
                            Email = "teacher@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEACHER",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "476af1fa-f8f8-45b5-be5e-8356cf0b3b74",
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = "teacher1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cfc605c-3032-4719-9cbc-dcb01e243606",
                            Email = "teacher@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEACHER1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8512b81f-4cff-4fd0-9481-879e9d35adfa",
                            TwoFactorEnabled = false,
                            UserName = "teacher1"
                        },
                        new
                        {
                            Id = "teacher2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9470bf12-ee19-48ab-8de1-43663e174f81",
                            Email = "teacher@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEACHER2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5470aaf-e3ce-4032-badf-424a798f8a02",
                            TwoFactorEnabled = false,
                            UserName = "teacher2"
                        },
                        new
                        {
                            Id = "teacher3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1aa13560-d967-4a2a-8b58-94de634658d0",
                            Email = "teacher@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEACHER3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97bd7f7a-a994-4432-9f9b-223732381a24",
                            TwoFactorEnabled = false,
                            UserName = "teacher3"
                        },
                        new
                        {
                            Id = "teacher4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d87b7ec7-e17a-4682-a44b-5012f57e68e0",
                            Email = "teacher@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEACHER4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5964a9a2-18c6-4466-8059-a695b001ee47",
                            TwoFactorEnabled = false,
                            UserName = "teacher4"
                        },
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de83e84a-d723-4be7-b4df-c5fcd0fac962",
                            Email = "admin@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEE1szMTOXMPlJ65DIr1USWl5UFOWEjN41Z8iMOtE8x/EYnyL5poVH3NjPhS4b6MEYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4096ccba-3146-4851-aae6-ed831d8ec8d9",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Job")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Başakşehir",
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Harun",
                            Gender = "Erkek",
                            ImageUrl = "harun.png",
                            Job = "Developer",
                            LastName = "Özer",
                            Url = "harun-ozer",
                            UserId = "student"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Başakşehir",
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ogrenci",
                            Gender = "Erkek",
                            ImageUrl = "harun.png",
                            Job = "Developer",
                            LastName = "Özer",
                            Url = "ogrenci-ozer",
                            UserId = "ogrenci"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentsCourses", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CourseId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 2
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Job")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PricePerHour")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Şuanda Wissen Akademie'de yazılım kursundayım. Matematik alanında ders veriyorum.",
                            Address = "Esenler",
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = 5,
                            FirstName = "Mert",
                            Gender = "Erkek",
                            ImageUrl = "10.png",
                            IsHome = true,
                            Job = "Developer",
                            LastName = "Muslu",
                            PricePerHour = 350,
                            Url = "mert-muslu",
                            UserId = "teacher"
                        },
                        new
                        {
                            Id = 2,
                            About = "Müziğe ilgi duyuyorum. Müzikle birlikte yabancı dillerin de öğrenilebileceğine inanıyorum.",
                            Address = "Başakşehir",
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = 2,
                            FirstName = "Gonca",
                            Gender = "Kadın",
                            ImageUrl = "11.png",
                            IsHome = true,
                            Job = "Almanca Öğretmeni",
                            LastName = "Özer",
                            PricePerHour = 500,
                            Url = "gonca-ozer",
                            UserId = "teacher1"
                        },
                        new
                        {
                            Id = 3,
                            About = "Sınıf öğretmenliği yapıyorum. Öğrencilerimi eğitmeyi ve onlara bir şeyler katmayı seviyorum.",
                            Address = "Göztepe",
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = 8,
                            FirstName = "Hatice",
                            Gender = "Kadın",
                            ImageUrl = "11.png",
                            IsHome = true,
                            Job = "Sınıf Öğretmeni",
                            LastName = "Durmuş",
                            PricePerHour = 500,
                            Url = "hatice-durmus",
                            UserId = "teacher2"
                        },
                        new
                        {
                            Id = 4,
                            About = "Aktif olarak ingilizce tercümanlığı ile meşgulüm. Senelerdir ingilizce alanınca tezler ve çeviriler hazırlıyorum. Öğrencilerime her seviyede ingilizce eğitimi verebilirim.",
                            Address = "Kartal",
                            City = "İstanbul",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = 20,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "10.png",
                            IsHome = true,
                            Job = "İngilizce Tecrümanı",
                            LastName = "Yılmaz",
                            PricePerHour = 900,
                            Url = "ahmet-yilmaz",
                            UserId = "teacher3"
                        },
                        new
                        {
                            Id = 5,
                            About = "Yurtdışında gördüğüm müzik eğitimiyle birlikte türkiyede aktif olarak öğretmenlik yapmaktayım. Çeşitli organizasyonlarda ve yarışmalarda başarılarım bulunmakta. Ses eğitimi ve müzik bilgisi alanında öğrencilerimi ileri seviyeye taşımak için elimden geleni yapmaktayım.",
                            Address = "Çağlayan",
                            City = "Ankara",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = 10,
                            FirstName = "David",
                            Gender = "Erkek",
                            ImageUrl = "10.png",
                            IsHome = true,
                            Job = "Müzik Öğretmeni",
                            LastName = "Dark",
                            PricePerHour = 600,
                            Url = "david-dark",
                            UserId = "teacher4"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 1,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.TeacherCourse", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TeachersCourses", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            CourseId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            CourseId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersler.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Course", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Student", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Identity.User", "User")
                        .WithOne("Students")
                        .HasForeignKey("OzelDersler.Entity.Concrete.Student", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.StudentCourse", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersler.Entity.Concrete.Student", "Student")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Identity.User", "User")
                        .WithOne("Teachers")
                        .HasForeignKey("OzelDersler.Entity.Concrete.Teacher", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersler.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.TeacherCourse", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersler.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeachersCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Student", b =>
                {
                    b.Navigation("StudentsCourses");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherBranches");

                    b.Navigation("TeachersCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
